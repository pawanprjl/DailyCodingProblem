'''

This problem was asked by Google.

An XOR linked list is a more memory efficient doubly linked list. Instead of each node holding next and prev fields, it holds a field named both, which is an XOR of the next node and the previous node. Implement an XOR linked list; it has an add(element) which adds the element to the end, and a get(index) which returns the node at index.

If using a language that has no pointers (such as Python), you can assume you have access to get_pointer and dereference_pointer functions that converts between nodes and memory addresses.

'''

class Node:
	def __init__(self, val):
        self.val = val
        self.both = 0
        
    def __str__(self):
        return str(self.val)
        

class XORLinkedList:
    def __init__(self):
        self.head = Node(None)
        self.tail = Node(None)
        self.length = 0
        
    def add(element):
        newNode = Node(element)
        if self.head.val == None:
            self.head = self.tail = newNode
        else:
            newNode.both = get_pointer(self.tail)
            self.tail.both = self.tail.both ^ get_pointer(newNode)
            self.tail = newNode
        length+= 1
    
    def get(index):
        if index >= length:
            raise ValueError('Invalid Index!')
        else:
            ptr = self.head.both
            prev_addr = get_pointer(self.head)
            
            while index > 0:
                node = dereference_pointer(ptr)
                ptr = node.both ^ prev_addr
                prev_addr = ptr
                index -=1
            
            if index==0:
                return dereference_pointer(ptr)
                
                
if __name__ == '__main__':
    pass
